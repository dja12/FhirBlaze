@using FhirBlaze.SharedComponents.Services
@using FhirBlaze.SharedComponents.SMART
@using Newtonsoft.Json
@using FhirBlaze.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager UriHelper
@inject SmartLauncher Launcher
@inject CacheContextService CacheContextService
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject AppState AppState

<button class="btn @ButtonClass()" disabled="@Processing" @onclick="LaunchApp">@Label</button>

@code {
    private string ButtonClass() => ShowAsLink ? "btn-link" : "btn-primary";

    [Parameter]
    public string CurrentPatient { get; set; }

    [Parameter]
    public bool Navigator { get; set; } = false;

    [Parameter]
    public bool ShowAsLink { get; set; } = false;

    private readonly string DefaultLabel = "Truity Provider";
    private string Label {
        get
        {
            return Processing ?
                "Launching..." :
                Navigator ? DefaultLabel + " Navigator" : DefaultLabel;
        }
    }

    private bool Processing { get; set; }

    [Inject] IAccessTokenProvider TokenProvider { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        base.OnInitialized();

        //if (Navigator)
        //{
        //    Label = Label + " Navigator";
        //}

        var options = new AccessTokenRequestOptions();
        options.Scopes = new List<string>();
        options.Scopes.Append<string>("https://smart-on-fhir-server.trulitehealth1.onmicrosoft.com/user_impersonation");
        var accessTokenResult = await TokenProvider.RequestAccessToken(options);
        if (accessTokenResult.TryGetToken(out var token))
        {
            AppState.AccessToken = token.Value;
        }
    }

    private async Task LaunchApp()
    {
        var ctx = new
        {
            patient = CurrentPatient,
            viewType = Navigator ? "navigator" : "browser",
            userFirstName = AppState.UserFirstName,
            userLastName = AppState.UserLastName
        };
        var encodedJson = Launcher.EncodePayload(JsonConvert.SerializeObject(ctx));

        var launchLink = Launcher.GetLaunchUrl(encodedJson);

        Processing = true;

        // Call the cache context endpoint first.
        await CacheContextService.SaveConext(AppState.AccessToken, AppState.UserId, encodedJson);

        // Now launch the App
        await JSRuntime.InvokeVoidAsync("open", launchLink, "_blank");

        Processing = false;
    }
}
