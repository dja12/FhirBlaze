@using FhirBlaze.SharedComponents.Services
@using FhirBlaze.SharedComponents.SMART
@using Newtonsoft.Json
@using FhirBlaze.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager UriHelper
@inject SmartLauncher Launcher
@inject CacheContextService CacheContextService
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject AppState AppState

@if (Embed)
{
    <div class="card mb-6">
        <div class="card-header">
            <h3 class=".card-title">
                <button class="btn btn-link btn-block text-left collapsed " type="button" @onclick="() => Collapsed = !Collapsed">
                    <h3>
                        TruLite Health Equity
                    </h3>
                </button>
            </h3>
        </div>
        <div class="collapse @EmbedClass()">
            <iframe style="width:100%;height:400px" src="@EmbedUrl" allow="encrypted-media; picture-in-picture" allowfullscreen></iframe>
        </div>
    </div>
}
else
{
    <button class="btn @ButtonClass()" disabled="@Processing" @onclick="LaunchApp">@Label</button>
}

@code {
    private string ButtonClass() => ShowAsLink ? "btn-link" : "btn-primary";
    private string EmbedClass() => Collapsed ? "show" : "";
    private bool Collapsed { get; set; }
    private string EmbedUrl { get; set; }

    [Parameter]
    public string CurrentPatient { get; set; }

    [Parameter]
    public bool Navigator { get; set; } = false;

    [Parameter]
    public bool ShowAsLink { get; set; } = false;

    [Parameter]
    public bool Embed { get; set; } = false;

    private readonly string DefaultLabel = "Truity Provider";
    private string Label
    {
        get
        {
            return Processing ?
                "Launching..." :
                Navigator ? DefaultLabel + " Navigator" : DefaultLabel;
        }
    }

    private bool Processing { get; set; }

    [Inject] IAccessTokenProvider TokenProvider { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        base.OnInitialized();

        var options = new AccessTokenRequestOptions();
        options.Scopes = new List<string>();
        options.Scopes.Append<string>("https://smart-on-fhir-server.trulitehealth1.onmicrosoft.com/user_impersonation");
        var accessTokenResult = await TokenProvider.RequestAccessToken(options);
        if (accessTokenResult.TryGetToken(out var token))
        {
            AppState.AccessToken = token.Value;
        }


        if (Embed)
        {
            // We are showing the embed view of the app so we need to call the cache context service now and build
            // the embed URL for the iframe.

            var ctx = new
            {
                patient = CurrentPatient,
                viewType = Navigator ? "navigator" : "browser",
                userFirstName = AppState.UserFirstName,
                userLastName = AppState.UserLastName
            };
            var encodedJson = Launcher.EncodePayload(JsonConvert.SerializeObject(ctx));

            // Call the cache context endpoint first.
            await CacheContextService.SaveConext(AppState.AccessToken, AppState.UserId, encodedJson);

            // Set the embed URL for the iframe.
            EmbedUrl = Launcher.GetLaunchUrl(encodedJson);
        }
    }

    private async Task LaunchApp()
    {
        var ctx = new
        {
            patient = CurrentPatient,
            viewType = Navigator ? "navigator" : "browser",
            userFirstName = AppState.UserFirstName,
            userLastName = AppState.UserLastName
        };
        var encodedJson = Launcher.EncodePayload(JsonConvert.SerializeObject(ctx));

        var launchLink = Launcher.GetLaunchUrl(encodedJson);

        Processing = true;

        // Call the cache context endpoint first.
        await CacheContextService.SaveConext(AppState.AccessToken, AppState.UserId, encodedJson);

        // Now launch the App
        await JSRuntime.InvokeVoidAsync("open", launchLink, "_blank");

        Processing = false;
    }
}
