@page "/patient/{Id}"
@using FhirBlaze.Models
@using FhirBlaze.SharedComponents.SMART
@using Hl7.Fhir.Model
@using Newtonsoft.Json
@inject NavigationManager UriHelper
@inject SmartLauncher Launcher
@inject IFhirService fhirService
@inject AppState AppState

<div class="container">
    <h3>Patient Detail</h3>
    <div class="card border-primary mb-6">
        <h5 class="card-header">
            @CurrentPatient.Name?.FirstOrDefault()
            <button style="float: right" class="btn btn-primary" title="View JSON" @onclick="ShowPatientJson"><i class="oi oi-code"></i></button>
        </h5>
        <div class="card-body">
            <p class="card-text">
                <dl class="row">
                    <dt class="col-sm-3">ID:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Id</dd>

                    <dt class="col-sm-3">DOB:</dt>
                    <dd class="col-sm-9">@CurrentPatient.BirthDate</dd>

                    <dt class="col-sm-3">Gender:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Gender</dd>

                    <dt class="col-sm-3">Race:</dt>
                    <dd class="col-sm-9">@GetPatientRace(CurrentPatient)</dd>

                    <dt class="col-sm-3">Ethnicity:</dt>
                    <dd class="col-sm-9">@GetPatientEthnicity(CurrentPatient)</dd>

                    <dt class="col-sm-3">Deceased:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Deceased</dd>

                    <dt class="col-sm-3">Marital Status:</dt>
                    <dd class="col-sm-9">@CurrentPatient.MaritalStatus?.FirstOrDefault(t => t.Key == "text").Value</dd>

                    <dt class="col-sm-3">Languge:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Communication?.FirstOrDefault()?.Language?.Coding?.FirstOrDefault(c => c.System == "urn:ietf:bcp:47")?.Code </dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-3">Address:</dt>
                    <dd class="col-sm-9"><AddressDisplay Address="@CurrentPatient.Address?.FirstOrDefault(a => a.Use == Address.AddressUse.Home)" /></dd>

                    <dt class="col-sm-3">Phone:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Telecom?.FirstOrDefault(t => t.Use == ContactPoint.ContactPointUse.Mobile)?.Value</dd>

                    <dt class="col-sm-3 text-truncate">E-mail:</dt>
                    <dd class="col-sm-9">@CurrentPatient.Telecom?.FirstOrDefault(e => e.System == ContactPoint.ContactPointSystem.Email)?.Value</dd>
                </dl>
            </p>
            @*<button type="button" class="btn btn-primary">Active: @CurrentPatient.Active</button>*@
            <TruityAppLauncher CurrentPatient=@Id Navigator="true" />

            @*<a class="btn btn-primary" target="_blank" href="@ChestistLaunchUrl">xTruity Provider</a>
                <button type="button" class="btn btn-primary" @onclick="LaunchQuestionnaire">Take Survey</button>*@

        </div>
    </div>

    @*<div class="card mb-6">
            <div class="card-header">
                <h3 class=".card-title">
                    <button class="btn btn-link btn-block text-left collapsed " type="button" @onclick="() => Collapsed = !Collapsed">
                        <h3>
                            Observations: @PatientObservations.Count
                        </h3>
                    </button>
                </h3>
            </div>
            <div class="collapse @ButtonClass()">
                @foreach (var o in PatientObservations)
                {
                    <ObservationDisplay Observation="o" />
                }
            </div>
        </div>*@

    @*<div class="card mb-6">
            <h3>Procedures: @PatientProcedures.Count</h3>
            @foreach (var o in PatientProcedures)
            {
                <ProcedureDisplay Procedure="o" />
            }
        </div>*@

    @*<div class="card mb-6">
            <h3>Conditions: @PatientConditions.Count</h3>
            @foreach (var o in PatientConditions)
            {
                <ConditionDisplay Condition="o" />
            }
        </div>*@

    @*<div class="card mb-6">
            <h3>MedicationRequests: @PatientMedicationRequests.Count</h3>
            @foreach (var o in PatientMedicationRequests)
            {
                <MedicationRequestDisplay MedicationRequest="o" />
            }
        </div>*@

    <br />
    <TruityAppLauncher CurrentPatient=@Id Embed="true" Navigator="true" />

    <br />
    <ObservationsDisplay PatientObservations="@PatientObservations" />
    <br />
    <ProceduresDisplay PatientProcedures="@PatientProcedures" />
    <br />
    <ConditionsDisplay PatientCondition="@PatientConditions" />
    <br />
    <MedicationRequestsDisplay PatientMedicationRequests="@PatientMedicationRequests" />

</div>


@code {

    [Parameter]
    public string Id { get; set; }

    public IList<Observation> PatientObservations { get; set; } = new List<Observation>();
    public IList<Procedure> PatientProcedures { get; set; } = new List<Procedure>();
    public IList<Condition> PatientConditions { get; set; } = new List<Condition>();
    public IList<MedicationRequest> PatientMedicationRequests { get; set; } = new List<MedicationRequest>();
    public Patient CurrentPatient { get; set; } = new Patient();


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        CurrentPatient = await fhirService.GetResourceByIdAsync<Patient>(Id);

        PatientObservations = await fhirService.GetPatientObservations(CurrentPatient.Id);
        PatientProcedures = await fhirService.GetPatientProcedures(CurrentPatient.Id);
        PatientConditions = await fhirService.GetPatientConditions(CurrentPatient.Id);
        PatientMedicationRequests = await fhirService.GetPatientMedicationRequests(CurrentPatient.Id);
    }

    private string GetPatientRace(Patient patient)
    {
        Extension usCoreRaceExt = patient?.Extension?.FirstOrDefault(e => e.Url == "http://hl7.org/fhir/us/core/StructureDefinition/us-core-race");
        var coding = (Coding)usCoreRaceExt?.Extension?.FirstOrDefault(e => e.Url == "ombCategory")?.Value;
        return coding?.Display + " (" + coding?.Code + ")";
    }

    private string GetPatientEthnicity(Patient patient)
    {
        Extension usCoreRaceExt = patient?.Extension?.FirstOrDefault(e => e.Url == "http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity");
        var coding = (Coding)usCoreRaceExt?.Extension?.FirstOrDefault(e => e.Url == "ombCategory")?.Value;
        return coding?.Display + " (" + coding?.Code + ")";
    }

    private void ShowPatientJson()
    {
        AppState.CurrentResource = CurrentPatient;
        UriHelper.NavigateTo("jsonview");
    }

    public void LaunchQuestionnaire()
    {

    }

}
