@page "/PowerBI"
@using System
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.PowerBI.Api
@using Microsoft.PowerBI.Api.Models
@using Microsoft.Rest
@using Newtonsoft.Json.Linq
@using Microsoft.Extensions.Configuration
@using Microsoft.JSInterop
@using FhirBlaze.SharedComponents
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IConfiguration _configuration

@if (report is null)
{
    <LoadingSpinner />
}
@if (!String.IsNullOrEmpty(errorMessage))
{
    <label style="font-weight:650px">Cannot embed Power BI Report:</label>
    <span>@errorMessage</span>
}

<div @ref="@PowerBIElement" style="height: 700px;width: 100%;max-width: 2000px;" />

@code {
    private ElementReference PowerBIElement;

    private IJSObjectReference? _jsModule;
    private string errorMessage = string.Empty;
    private Report report { get; set; }
    private EmbedToken embedToken { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var embedModuleTask = JS.InvokeAsync<IJSObjectReference>("import", "./scripts/showreport.js");
                _jsModule = await embedModuleTask;

                // Just add a bogus Auth header.  APIM will manage the access tokens.
                var tokenCredentials = new TokenCredentials("123", "Bearer");

                using (var client = new PowerBIClient(new Uri(_configuration["PowerBI:ApiUrl"]), tokenCredentials))
                {
                    var workspaceId = Guid.Parse(_configuration["PowerBI:WorkspaceId"]);
                    var reportId = Guid.Parse(_configuration["PowerBI:ReportId"]);
                    report = await client.Reports.GetReportInGroupAsync(workspaceId, reportId);
                    var generateTokenRequestParameters = new GenerateTokenRequest(accessLevel: "view");
                    embedToken = await client.Reports.GenerateTokenAsync(workspaceId, reportId, generateTokenRequestParameters);
                }

                StateHasChanged();
            }
            else if (_jsModule is not null && report is not null && embedToken is not null)
            {
                errorMessage = string.Empty;

                await _jsModule.InvokeVoidAsync(
                    "showReport",
                    PowerBIElement,
                    embedToken.Token,
                    report.EmbedUrl,
                    report.Id.ToString());
            }
            else
            {
                errorMessage = "The report could not be accessed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule is not null)
            await _jsModule.DisposeAsync();
    }
}